---
- name: Detect first time
  stat:
    path: '{{ansible_user_dir}}/.config/dkub-dotfiles/dotfiles_and_software_has_run'
  register: first_run_stat

- name: Update base packages
  become: yes
  apt:
    upgrade: yes
    update_cache: yes
    cache_valid_time: 86400 #One day`

- name: Install prerequistes
  become: yes
  package:
    name: '{{ item }}'
  with_items:
    - ca-certificates
    - cmake
    - curl
    - fish
    - git
    - groff
    - jq
    - libreadline-dev
    - libsqlite3-dev
    - libssl-dev
    - libxml2-dev
    - libxslt1-dev
    - libyaml-dev
    - neovim
    - pass
    - pkg-config
    - python3-pip
    - python3.9
    - python-is-python3
    - silversearcher-ag
    - zip
    - zlib1g-dev

- name: Install Git LFS Package
  become: yes
  package:
    name: git-lfs
  notify: Install Git LFS Command

# Install GH CLI
- name: Add ghcli repo key
  become: yes
  apt_key:
    keyserver: keyserver.ubuntu.com
    id: 2CA32056ED206CB81F44A8CAC99B11DEB97541F0
- name: Add ghecli repository
  become: yes
  apt_repository:
    repo: deb https://cli.github.com/packages {{ ansible_distribution_release }} main
    update_cache: yes
- name: Install ghcli
  become: yes
  package:
    name: gh

- name: "Install Keybase Package"
  apt:
    deb: https://prerelease.keybase.io/keybase_amd64.deb
  notify:
    - Run Keybase

- name: Create Directories
  file:
    path: '{{ item }}'
    state: directory
  with_items:
    - '{{ ansible_user_dir }}/bin'
    - '{{ ansible_user_dir }}/.config'
    - '{{ ansible_user_dir }}/.local/share/nvim/site/autoload'

- name: Create soft links to place configurations
  file:
    path: '{{ item.path }}'
    src: '{{ item.src }}'
    state: link
    force: yes
  with_items:
    - src: '{{ ansible_user_dir }}/.dotfiles/fish'
      path: '{{ ansible_user_dir }}/.config/fish'
    - src: '{{ ansible_user_dir }}/.dotfiles/omf'
      path: '{{ ansible_user_dir }}/.config/omf'
    - src: '{{ ansible_user_dir }}/.dotfiles/nvim'
      path: '{{ ansible_user_dir }}/.config/nvim'
    - src: '{{ ansible_user_dir }}/.dotfiles/git/gitconfig'
      path: '{{ ansible_user_dir }}/.gitconfig'

## Oh my fish
- name: Check oh my fish exists
  stat:
    path: '{{ ansible_user_dir }}/.local/share/omf'
  register: stat_ohmyfish_result

- name: Get oh my fish script
  get_url:
    url: https://get.oh-my.fish
    dest: /tmp/install_omf.fish
  when: not stat_ohmyfish_result.stat.exists

- name: Install oh my fish
  command: /usr/bin/fish /tmp/install_omf.fish --noninteractive
  when: not stat_ohmyfish_result.stat.exists

- name: Set fish as default shell for {{ user }}
  become: yes
  user:
    name: "{{ user }}"
    shell: /usr/bin/fish

# Nvim additional config
- name: Grab newest Plug.vim
  get_url:
    url: https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    dest: '{{ ansible_user_dir }}/.local/share/nvim/site/autoload/plug.vim'
  notify:
    - Install Vim Plugins

# GNUPG adjustments.
- name: Make sure gnupg-agent.conf exists
  file:
    path: '{{ ansible_user_dir}}/.gnupg/gpg-agent.conf'
    state: file
    mode: 'u=rw,g=,o='
- name: Ensure pinentry is configured.
  lineinfile:
    path: '{{ ansible_user_dir}}/.gnupg/gpg-agent.conf'
    regexp: '^pinentry-program'
    line: 'pinentry-program /usr/bin/pinentry'

# Copy post setup script.
- name: Copy post setup script
  copy:
    src: '{{ role_path }}/resources/complete-setup.sh'
    dest: '{{ ansible_user_dir }}/complete-setup.sh'
    mode: 'u=rwx,g=rx,o=rx'
  when: not first_run_stat.stat.exists 

- name: Mark role as first run completed.
  file:
    path: '{{ item.path }}'
    state: '{{ item.state }}'
  when: not first_run_stat.stat.exists  
  with_items:
    - path: '{{ansible_user_dir}}/.config/dkub-dotfiles/'
      state: directory
    - path: '{{ansible_user_dir}}/.config/dkub-dotfiles/dotfiles_and_software_has_run'
      state: touch